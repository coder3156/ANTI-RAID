import discord
from discord.ext import commands
import asyncio
from collections import defaultdict
from datetime import datetime, timedelta

TOKEN = "YOUR_BOT_TOKEN"
MOD_ROLE = "Moderator"     # Only people with this role can use commands
MUTED_ROLE = "Muted"       # Name of your muted role

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.messages = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# Track messages per user
user_logs = defaultdict(list)

# Raid detection settings
MESSAGE_LIMIT = 5      # Messages per user
TIME_WINDOW = 5        # Seconds
MUTE_DURATION = 60     # Seconds


@bot.event
async def on_ready():
    print(f"✅ Logged in as {bot.user}")


# ---- Manual Lock Command ----
@bot.command(name="lock")
@commands.has_permissions(manage_channels=True)
async def lock(ctx, channel: discord.TextChannel = None):
    """Manually lock a channel"""
    if not any(role.name == MOD_ROLE for role in ctx.author.roles):
        await ctx.send("🚫 You don’t have permission to use this command.")
        return

    if channel is None:
        channel = ctx.channel

    overwrite = channel.overwrites_for(ctx.guild.default_role)
    overwrite.send_messages = False
    await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)

    await ctx.send(f"🔒 {channel.mention} has been locked down.")


@bot.command(name="unlock")
@commands.has_permissions(manage_channels=True)
async def unlock(ctx, channel: discord.TextChannel = None):
    """Manually unlock a channel"""
    if not any(role.name == MOD_ROLE for role in ctx.author.roles):
        await ctx.send("🚫 You don’t have permission to use this command.")
        return

    if channel is None:
        channel = ctx.channel

    overwrite = channel.overwrites_for(ctx.guild.default_role)
    overwrite.send_messages = True
    await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)

    await ctx.send(f"✅ {channel.mention} has been unlocked.")


# ---- Auto Anti-Raid with Mute ----
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user = message.author
    now = datetime.utcnow()

    # Track messages per user
    user_logs[user.id].append(now)

    # Keep only recent messages
    user_logs[user.id] = [
        t for t in user_logs[user.id] if now - t < timedelta(seconds=TIME_WINDOW)
    ]

    # If user spams too much
    if len(user_logs[user.id]) >= MESSAGE_LIMIT:
        muted_role = discord.utils.get(message.guild.roles, name=MUTED_ROLE)

        if not muted_role:
            await message.channel.send("⚠️ No 'Muted' role found. Please create one!")
            return

        if muted_role not in user.roles:
            await user.add_roles(muted_role)
            await message.channel.send(
                f"🔇 {user.mention} has been muted for spamming (auto-raid detection)."
            )

            # Auto-unmute after MUTE_DURATION
            await asyncio.sleep(MUTE_DURATION)
            await user.remove_roles(muted_role)
            await message.channel.send(f"✅ {user.mention} has been unmuted.")

        # Reset log for this user
        user_logs[user.id].clear()

    await bot.process_commands(message)


bot.run(TOKEN)


